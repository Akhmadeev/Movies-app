[{"C:\\Users\\Rustam\\Desktop\\JavaM\\React\\movies\\src\\index.js":"1","C:\\Users\\Rustam\\Desktop\\JavaM\\React\\movies\\src\\compons\\items\\item.js":"2","C:\\Users\\Rustam\\Desktop\\JavaM\\React\\movies\\src\\compons\\Search\\search.js":"3"},{"size":1175,"mtime":1610713798923,"results":"4","hashOfConfig":"5"},{"size":3561,"mtime":1610874809654,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1610710690695,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1qh6rbh",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"10"},"C:\\Users\\Rustam\\Desktop\\JavaM\\React\\movies\\src\\index.js",[],["17","18","19","20","21"],"C:\\Users\\Rustam\\Desktop\\JavaM\\React\\movies\\src\\compons\\items\\item.js",["22","23","24"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { format } from 'date-fns';\r\nimport { Row, Card, Image, Col, Spin, Alert, Typography, Rate} from 'antd';\r\n\r\nexport default class Items extends Component {\r\n\r\nstate = {\r\n  cards: [],\r\n  loading: true,\r\n  error: false\r\n};\r\n\r\nstatic defaultProps = {\r\n  search: 'harry'\r\n};\r\n\r\nstatic propTypes = {\r\n  search: PropTypes.string\r\n}\r\n\r\ncomponentDidMount() {\r\n  const {search} =  this.props;\r\n  console.log(search);\r\n  this.getResourse(`https://api.themoviedb.org/3/search/movie?api_key=869cb700bbfae56825fae5c59c77dd18&query=${'girl111111'}`)\r\n  .then(array => this.setState({\r\n    cards: array.results,\r\n    loading: false\r\n  }))\r\n  .catch(this.onError);\r\n}\r\n\r\nonError = () => {\r\n  this.setState({\r\n    loading: false,\r\n    error: true\r\n  });\r\n}\r\n\r\nonErrorOffInternet() {\r\n  return (\r\n    <Alert\r\n      message=\"Ошибка\"\r\n      description=\"Не поладки с интернетом\"\r\n      type=\"попробуйте перезагрузить страничку\"\r\n      showIcon\r\n    />\r\n  )\r\n}\r\n\r\ngetResourse = async (url) => {\r\n  const res = await fetch(url);\r\n  console.log(window.navigator.onLine)\r\n  // if(!window.navigator.onLine) {\r\n  //   return this.onError()\r\n  // }\r\n  const body = await res.json();\r\n  return body\r\n}\r\n\r\nspinLoading() {\r\n  return (\r\n    <Spin tip=\"Loading...\" size=\"large\">\r\n      <Alert\r\n        message=\"one secons please\"\r\n        description=\"Further details about the context of this alert.\"\r\n        type=\"info\"\r\n      />\r\n    </Spin>)\r\n}\r\n\r\nshortText(longText, maxLength) {\r\n  const dots = '...'\r\n  const pos = longText.indexOf(\" \", maxLength);\r\n  return (pos === -1 ? longText : longText.substr(0, pos) + dots)\r\n}\r\n\r\nnewItem(card) {\r\n\r\n  const { Text } = Typography;\r\n  const imgMove = `https://image.tmdb.org/t/p/w500${card.poster_path}`;\r\n  const nameMove = card.original_title;\r\n  const dataMove = card.release_date ? format(new Date(card.release_date), \"PP\") : null;\r\n  const overviewMove = card.overview;\r\n  const idMove = card.id;\r\n  const voteMove = card.vote_average;\r\n\r\n  return (\r\n    <Col sm={{ span: 24 }} lg={{ span: 12 }} xl={{ span: 10 }} key={idMove} style={{ minWidth: 430, height: 281 }}>\r\n      <Card style={{ width: 430, height: 281 }}>\r\n        <Row >\r\n          <Col span={12}>\r\n            <Image\r\n              width={183}\r\n              height={241}\r\n              src={imgMove}/>\r\n          </Col>\r\n          <Col span={12}>\r\n            <Row >\r\n              <Col span={20}><Text strong>{nameMove}</Text></Col>\r\n              <Col span={3}><Text type=\"warning\">{voteMove} </Text></Col>\r\n            </Row>\r\n            <Text disabled>{dataMove}</Text> <br/>\r\n            <Text code>drama</Text><br/>\r\n            <Text>{this.shortText(overviewMove, 125)}</Text> <br/>\r\n            <Rate allowHalf defaultValue={voteMove} count={10} />\r\n          </Col>\r\n        </Row>\r\n      </Card>\r\n    </Col>\r\n  )\r\n}\r\n\r\n  render() {\r\n    const {cards, loading, error} = this.state;\r\n    console.log(error)\r\n\r\n    if(loading) return this.spinLoading();\r\n    if(error) return <Alert type=\"error\" message=\"ошибка в запросе и все\" banner />;\r\n\r\n    if (!navigator.onLine) return this.onErrorOffInternet()\r\n    if(cards.length === 0) return <Alert type=\"error\" message=\"по вашему запросу не найдено фильмов\" banner />;\r\n    return (\r\n      <Row gutter={{xs: 8, sm: 16, md: 24}} justify=\"center\"> \r\n        {cards.map(card => (this.newItem(card)))}\r\n      </Row>\r\n    )\r\n  }\r\n}\r\n","C:\\Users\\Rustam\\Desktop\\JavaM\\React\\movies\\src\\compons\\Search\\search.js",["25"],"import React, { Component } from 'react';\r\n\r\nimport { Input } from 'antd';\r\n\r\nexport default class Search extends Component {\r\n\r\n    \r\n\r\n    onSearch(event) {\r\n        console.log(event.target.value)\r\n    }\r\n\r\nrender() {\r\n\r\n    return (\r\n        <Input placeholder=\"Type to search...\"  style={{ marginBottom: 30 }} onChange={this.onSearch} allowClear='true' />\r\n    )\r\n}\r\n}\r\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":24,"column":3,"nodeType":"38","messageId":"39","endLine":24,"endColumn":14},{"ruleId":"36","severity":1,"message":"37","line":53,"column":3,"nodeType":"38","messageId":"39","endLine":53,"endColumn":14},{"ruleId":"36","severity":1,"message":"37","line":116,"column":5,"nodeType":"38","messageId":"39","endLine":116,"endColumn":16},{"ruleId":"36","severity":1,"message":"37","line":10,"column":9,"nodeType":"38","messageId":"39","endLine":10,"endColumn":20},"lines-around-directive",["40"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements"]